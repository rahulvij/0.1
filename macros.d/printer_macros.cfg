    
#####################################################################
# 	Macros
#####################################################################
    
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice

gcode:
    {% set BED_TEMP = params.BED_TEMP|default(100)|int %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|int %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(0)|int %}
    
    SET_GCODE_OFFSET Z=0.0
    
    M117 Heating!
    G28                              ; home all axes
    MOVE_CENTER Z=50                 ; Move to the middle
    M190 S{BED_TEMP}                 ; wait for bed final temp
    MOVE_CENTER Z=10                 ; Move to the middle
    M106 S191                        ; Turn Fan on at 75%
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={CHAMBER_TEMP}   ; wait for chamber temp
    M109 S{EXTRUDER_TEMP}            ; wait for extruder final temp
    
    G21                              ; set units to millimeters
    G90                              ; use absolute coordinates

    G28
        
    SET_SKEW XY=140.3,141.4,99.5    ; Load the skew  
    PURGE_LINE
    M117 Printing!
    
[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X5.0 Y5.0 F20000      ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    G1 Z2 F3000                    ; move nozzle up 2mm
    G90                            ; absolute positioning
    G0  X10 Y110 F3600             ; park nozzle at rear
    SET_SKEW CLEAR=1               ; Clear the skew 
     
[gcode_macro PURGE_LINE]
gcode:
# Print Purge line
    G1 Z5 X5 Y1 F5000 ; Go home
    G92 E0                        ; zero the extruded
    G1 E10 F250                   ; start purge line
    G1 Z0.2 X15 F1000             ; start purge line
    G1 X50 E20 F500               ; finish purge line
    G1 X70 Z5.0 F9000             ; Quick Wipe
    G92 E0                        ; zero the extruded

[gcode_macro MOTOR_OFF]
gcode:
    M18

[gcode_macro MOVE_CENTER]
description: Move head to center bed, Z argument default 20
gcode:
    {% set Z = params.Z|default(40)|float %}

    G90
    G0 X60 Y60 Z{Z} F12000
    
[gcode_macro PREP_ABS_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(110)|int %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|int %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(40)|int %}
    G28                             ; home all axes
    MOVE_CENTER Z=50                ; Move to the middle
    M190 S{BED_TEMP}                ; wait for bed final temp
    MOVE_CENTER Z=10                ; Move to the middle
    M106 S191                       ; Turn Fan on at 75%
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={CHAMBER_TEMP}   ; wait for chamber temp
    M109 S{EXTRUDER_TEMP}           ; wait for extruder final temp

[gcode_macro TEST_X]
gcode:
    {% set SPEED = params.SPEED|default(3000)|int %}
    {% set COUNT = params.COUNT|default(3)|int %}
    {% set MAX_X = params.MAX_X|default(115)|int %}
    {% set HOME_X = params.HOME_X|default(60)|int %}
    {% set HOME_Y = params.HOME_Y|default(60)|int %}

    {% for i in range(COUNT|int) %}
      G0 X10 F{SPEED}
      G0 X{MAX_X} F{SPEED}
    {% endfor %}
    G0 X{HOME_X} Y{HOME_Y} F{SPEED}

[gcode_macro TEST_Y]
gcode:
    {% set SPEED = params.SPEED|default(3000)|int %}
    {% set COUNT = params.COUNT|default(3)|int %}
    {% set MAX_Y = params.MAX_Y|default(115)|int %}
    {% set HOME_X = params.HOME_X|default(60)|int %}
    {% set HOME_Y = params.HOME_Y|default(60)|int %}

    {% for i in range(COUNT|int) %}
      G0 Y10 F{SPEED}
      G0 Y{MAX_Y} F{SPEED}
    {% endfor %}
    G0 X{HOME_X} Y{HOME_Y} F{SPEED}

[gcode_macro TEST_SQUARE]
gcode:
    {% set SPEED = params.SPEED|default(6000)|int %}
    {% set COUNT = params.COUNT|default(3)|int %}
    {% set MAX_X = params.MAX_X|default(115)|int %}
    {% set MAX_Y = params.MAX_Y|default(115)|int %}
    {% set HOME_X = params.HOME_X|default(60)|int %}
    {% set HOME_Y = params.HOME_Y|default(60)|int %}

    {% for i in range(COUNT|int) %}
      G0 X10 Y10 F{SPEED}
      G0 X{MAX_X} Y10 F{SPEED}
      G0 X{MAX_X} Y{MAX_Y} F{SPEED}
      G0 X10 Y{MAX_Y} F{SPEED}
    {% endfor %}
    G0 X{HOME_X} Y{HOME_Y} F{SPEED}

[gcode_macro TEST_DIAGONAL]
gcode:
    {% set SPEED = params.SPEED|default(6000)|int %}
    {% set COUNT = params.COUNT|default(3)|int %}
    {% set MAX_X = params.MAX_X|default(115)|int %}
    {% set MAX_Y = params.MAX_Y|default(115)|int %}
    {% set HOME_X = params.HOME_X|default(60)|int %}
    {% set HOME_Y = params.HOME_Y|default(60)|int %}

    {% for i in range(COUNT|int) %}
      G0 X10 Y10 F{SPEED}
      G0 X{MAX_X} Y{MAX_Y} F{SPEED}
      G0 X10 Y10 F{SPEED}
      
      G0 X{MAX_X} Y10 F{SPEED}
      G0 X10 Y{MAX_Y} F{SPEED}
      G0 X{MAX_X} Y10 F{SPEED}
    {% endfor %}
    G0 X{HOME_X} Y{HOME_Y} F{SPEED}
    
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	
	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }

	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} F{speed * 60}
		G0 X{x_min} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_max} F{speed * 60}
		G0 X{x_max} Y{y_min} F{speed * 60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		G28 X Y
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED
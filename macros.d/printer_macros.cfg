#####################################################################
#   print_start macro
#####################################################################
[gcode_macro _CG28]
description: Helper: Conditional homing
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %} 
        G28 
    {% endif %}

[gcode_macro PRINT_START]
gcode:
#   SET_TEMPERATURE_LED LED=bed_light SENSOR=heater_bed

    {action_respond_info("Running PRINT START...")}    
    # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
    {% set target_bed = params.BED|int %}
    {% set target_extruder = params.EXTRUDER|int %}
    {% set target_chamber = params.CHAMBER|default("40")|int %}
    {% set chamber_sensor = printer["temperature_sensor chamber"] %}

    # Homes the printer and sets absolute positioning
    G28                   # Full home (XYZ)
    G90                   # Absolut position

    # If the chamber is less than target then soak for 30 mins else 5 mins
    {% if chamber_sensor.temperature|int < target_chamber %}
        PREP_CHAMBER BED={target_bed} CHAMBER={target_chamber} SOAK=30
    {% else %}
        PREP_CHAMBER BED={target_bed} CHAMBER={target_chamber} SOAK=0
    {% endif %}
    
    # Heats up the nozzle up to target via slicer
    M107                        # Turns off partcooling fan
    M109 S{target_extruder}     # Heats the nozzle to printing temp

    SB_LED_ON
    
    SETUP_LINE_PURGE DISPLAY_PARAMETERS=1 ADAPTIVE_ENABLE=1
    LINE_PURGE                  # Adaptive Purge
    
    # PURGE_LINE HOTEND={target_extruder}
    M117 "Printing..."

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                ; retract filament
    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600                      ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000           ; move nozzle to remove stringing      
    TURN_OFF_HEATERS
    M107                                    ; turn off fan
    G90                                     ; absolute positioning
    G0 X{max_x-5} Y{max_y-5} F3600          ; park nozzle at rear
    
    SB_LED_OFF
    #CLEAR_TEMPERATURE_LED LED=bed_light
    M117 "Finished Printing..."
     
[gcode_macro PURGE_LINE]
gcode:
    {action_respond_info("Running PURGE LINE...")}
    {% set hotend = params.HOTEND|int %}

    _CG28
    G90                    ; absolute positioning

    M109 S{hotend}         ; set and wait for hotend temp
    G1 X30 Y0 Z0.4 F8000   ; move to purge start
 
    G91                    ; relative positioning
    G1 E10 F200             ; purge blob
    G1 X50 E15 F1200       ; first line
    G1 X20 Z4.6 F10000     ; Move away quickly
    G92 E0                 ; zero the extruder
    G90                    ; absolute positioning


######################### PREP FOR PRINT #########################

[gcode_macro PREP_CHAMBER]
gcode:
    {% set target_bed = params.BED|default(110)|int %}
    {% set target_chamber = params.CHAMBER|default(40)|int %}
    {% set soak_delay = params.SOAK|default(30)|float %}
    {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
    {% set z_wait = 50 %}
    
    {action_respond_info("Running PREP CHAMBER...")}    

    # Homes the printer and sets absolute positioning
    _CG28                   # Full home (XYZ)
    G90                   # Absolut position

    # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak
    {% if target_bed >= 100 %} 
        G1 X{x_wait} Y{y_wait} Z{z_wait} F9000                  # Goes to center of the bed
        M190 S{target_bed}                                # Sets target temp for the bed
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp
        _SOAK SOAK={soak_delay}

  # If the bed temp is not over 100c then it skips the heatsoak and just heats up to set temp with a 5min soak.
    {% else %} 
        G1 X{x_wait} Y{y_wait} Z{z_wait} F9000                  # Goes to center of the bed
        M190 S{target_bed}                              # Sets target temp for the bed
        G4 P300000                                      # Waits 5 min for the bedtemp to stabilize
    {% endif %} 

[gcode_macro _SOAK]
gcode:
    {% set soak_delay = params.SOAK|default(30)|float %}    
    {action_respond_info("Starting Soak for %d mins" % (soak_delay) )}

    {% for timer in range(soak_delay|int,0,-1) %}
      M105
      G4 P60000 # Wait 1 minute
    {% endfor %}

    {action_respond_info("Finished Soak")}


[gcode_macro MOVE_CENTER]
description: Move head to center bed, Z argument default 20
gcode:
    {% set Z = params.Z|default(20)|float %}
    {% set X = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set Y = printer.toolhead.axis_maximum.y|float / 2 %}
    _CG28
    G90
    G0 X{X} Y{Y} Z{Z} F12000

# # Home, get position, throw around toolhead, home again.
# # If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# # We only measure to a full step to accomodate for endstop variance.
# # Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

# [gcode_macro TEST_SPEED]
# gcode:
#     # Speed
#     {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
#     # Iterations
#     {% set iterations = params.ITERATIONS|default(5)|int %}
#     # Acceleration
#     {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
#     # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
#     {% set bound = params.BOUND|default(20)|int %}
#     # Size for small pattern box
#     {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
#     # Large pattern
#         # Max positions, inset by BOUND
#         {% set x_min = printer.toolhead.axis_minimum.x + bound %}
#         {% set x_max = printer.toolhead.axis_maximum.x - bound %}
#         {% set y_min = printer.toolhead.axis_minimum.y + bound %}
#         {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
#     # Small pattern at center
#         # Find X/Y center point
#         {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
#         {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
#         # Set small pattern box around center point
#         {% set x_center_min = x_center - (smallpatternsize/2) %}
#         {% set x_center_max = x_center + (smallpatternsize/2) %}
#         {% set y_center_min = y_center - (smallpatternsize/2) %}
#         {% set y_center_max = y_center + (smallpatternsize/2) %}

#     # Save current gcode state (absolute/relative, etc)
#     SAVE_GCODE_STATE NAME=TEST_SPEED
    
#     # Output parameters to g-code terminal
#     { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
#     # Home and get position for comparison later:
#         { action_respond_info("First Home")}
#         #G28
#         # QGL if not already QGLd (only if QGL section exists in config)
#         {% if printer.configfile.settings.quad_gantry_level %}
#             {% if printer.quad_gantry_level.applied == False %}
#                 QUAD_GANTRY_LEVEL
#                 G28 Z
#             {% endif %}
#         {% endif %} 
#         # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
#         G90
#         G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
# #        { action_respond_info("X Y Home")}
# #        G28 X Y
#         G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
#         G4 P1000 
#         GET_POSITION

#     # Go to starting position

#     { action_respond_info("G0:x_min %d y_min %d bound %d" % (x_min, y_min, bound))}
#     G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

#     # Set new limits
#     SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

#     {% for i in range(iterations) %}
#         # Large pattern
#             # Diagonals
#             G0 X{x_min} Y{y_min} F{speed*60}
#             G0 X{x_max} Y{y_max} F{speed*60}
#             G0 X{x_min} Y{y_min} F{speed*60}
#             G0 X{x_max} Y{y_min} F{speed*60}
#             G0 X{x_min} Y{y_max} F{speed*60}
#             G0 X{x_max} Y{y_min} F{speed*60}
            
#             # Box
#             G0 X{x_min} Y{y_min} F{speed*60}
#             G0 X{x_min} Y{y_max} F{speed*60}
#             G0 X{x_max} Y{y_max} F{speed*60}
#             G0 X{x_max} Y{y_min} F{speed*60}
        
#         # Small pattern
#             # Small diagonals 
#             G0 X{x_center_min} Y{y_center_min} F{speed*60}
#             G0 X{x_center_max} Y{y_center_max} F{speed*60}
#             G0 X{x_center_min} Y{y_center_min} F{speed*60}
#             G0 X{x_center_max} Y{y_center_min} F{speed*60}
#             G0 X{x_center_min} Y{y_center_max} F{speed*60}
#             G0 X{x_center_max} Y{y_center_min} F{speed*60}
            
#             # Small box
#             G0 X{x_center_min} Y{y_center_min} F{speed*60}
#             G0 X{x_center_min} Y{y_center_max} F{speed*60}
#             G0 X{x_center_max} Y{y_center_max} F{speed*60}
#             G0 X{x_center_max} Y{y_center_min} F{speed*60}
#     {% endfor %}

#     # Restore max speed/accel/accel_to_decel to their configured values
#     SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

#     # Re-home and get position again for comparison:
#         G28
#         # Go to XY home positions (in case your homing override leaves it elsewhere)
#         G90
#         G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
#         G4 P1000 
#         GET_POSITION

#     # Restore previous gcode state (absolute/relative, etc)
#     RESTORE_GCODE_STATE NAME=TEST_SPEED